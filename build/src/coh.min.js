/*! coh 02-06-2017 */

var Place=require("../models/place"),jwt=require("jsonwebtoken");module.exports=function(e){e.post("/v1/clients/:clientId/places",function(e,s){new Place({name:e.body.name,address:e.body.address,isActive:e.body.isActive,clientId:e.params.clientId,created_on:new Date,updated_on:new Date}).save(function(e){if(e)throw e;console.log("Client saved successfully"),s.json({success:!0})})}),e.get("/v1/clients/:clientId/places",function(e,s){Place.find({clientId:e.params.clientId},function(e,o){s.json(o)})}),e.get("/v1/clients/:clientId/places/:placeId",function(e,s){return Place.findById(e.params.placeId,function(e,o){return e?console.log(e):s.send(o)})}),e.put("/v1/clients/:clientId/places",function(e,s){return Place.findById(e.body._id,function(o,n){o?s.json({error:o}):(n.name=e.body.name,n.address=e.body.address,n.clientId=e.body.clientId,n.save(function(e){e&&s.send(e),s.json({success:"update Successfully!!"})}))})}),e.delete("/v1/clients/:clientId/places/:placeId",function(e,s){Place.remove({_id:e.params.placeId},function(e,o){e&&s.send(e),s.json({message:"Successfully deleted"})})})};var User=require("../../models/user");module.exports.userList=function(e,s){User.find({},function(e,o){s.json(o)})},module.exports.userById=function(e,s){return User.findById(e.params.userId,function(e,o){return e?console.log(e):s.send(o)})},module.exports.updateUser=function(e,s){return User.findById(e.body.userId,function(o,n){console.log(e),o?s.json({error:o}):(n.name=e.body.name,n.save(function(e){e&&s.send(e),s.json({success:"update Successfully!!"})}))})},module.exports.removeUser=function(e,s){User.remove({_id:e.params.userId},function(e,o){e&&s.send(e),s.json({message:"Successfully deleted"})})};var user_controller=require("./user_controller");module.exports=function(e){e.get("/v1/users",user_controller.userList),e.get("/v1/users/:userId",user_controller.userById),e.get("/v1/users/update",user_controller.updateUser),e.delete("/v1/users/:userId",user_controller.removeUser)};var mongoose=require("mongoose"),Schema=mongoose.Schema;module.exports=mongoose.model("Place",new Schema({name:String,address:String,isActive:Boolean,clientId:String,created_on:Date,updated_on:Date}));var UserSchema=new(Schema=(mongoose=require("mongoose")).Schema)({name:String,email:String,password:String,salt:String,admin:Boolean,clientAdmin:Boolean});module.exports=mongoose.model("User",UserSchema);var User=require("./models/user"),jwt=require("jsonwebtoken"),crypto=require("crypto");module.exports=function(e){e.post("/v1/register",function(e,s){console.log("Entered into api"),this.salt=crypto.randomBytes(16).toString("hex");var o=new User({name:e.body.name,password:crypto.pbkdf2Sync(e.body.password,this.salt,1e3,64,"sha1").toString("hex"),salt:this.salt,email:e.body.email,admin:!1});console.log("Entered into api 2"),o.save(function(e){if(console.log("Entered into save"),e)throw e;console.log("User saved successfully"),s.json({success:!0})})}),e.post("/v1/login",function(s,o){User.findOne({email:s.body.email},function(n,t){if(n)throw n;if(t){if(t){var r=crypto.pbkdf2Sync(s.body.password,t.salt,1e3,64).toString("hex");if(t.password!=r)o.json({success:!1,message:"Authentication failed. Wrong password."});else{var c=jwt.sign(t,e.get("superSecret"),{expiresInMinutes:1440});o.json({success:!0,message:"Enjoy your token!",token:c})}}}else o.json({success:!1,message:"Authentication failed. User not found."})})}),e.post("/v1/forgotpassword",function(e,s){User.findOne({email:e.body.email},function(e,o){if(e)throw e;o?o&&s.json({user:o}):s.json({success:!1,message:"Authentication failed. User not found."})})}),e.use(function(s,o,n){var t=s.body.authorization||s.query.authorization||s.headers.authorization;if(console.log(t),!t)return o.status(403).send({success:!1,message:"No token provided."});jwt.verify(t,e.get("superSecret"),function(e,t){if(e)return o.json({success:!1,message:"Failed to authenticate token."});s.decoded=t,n()})}),e.post("/v1/users/changepassword",function(e,s){return console.log("test"),this.salt=crypto.randomBytes(16).toString("hex"),User.findById(e.body.userId,function(o,n){if(o)return console.log(o);n.password=crypto.pbkdf2Sync(e.body.password,this.salt,1e3,64,"sha1").toString("hex"),n.salt=this.salt,n.save(function(e){e&&s.send(e),s.json({success:"update Successfully!!"})})})}),require("./api/user/users")(e),require("./api/places")(e)};